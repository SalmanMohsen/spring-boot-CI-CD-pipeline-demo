name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  DOCKERHUB_REPO: ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-ci-cd-pipeline-demo

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: 17

    - name: Run Unit Tests
      run: mvn -B test --file pom.xml

    - name: Build Application
      run: |
        mvn clean
        mvn -B package --file pom.xml
        
    - name: Verify JAR Exists
      run: ls -la target/*.jar

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/
          Dockerfile
      
    - name: Build Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        dockerfile: ./Dockerfile
        tags: |
          ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
          ${{ env.DOCKERHUB_REPO }}:staging
        push: false

  staging-deployment:
    name: Deploy to Staging
    needs: build-test
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code  
      uses: actions/checkout@v4
      
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: . 
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Push Staging Image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        tags: ${{ env.DOCKERHUB_REPO }}:staging
        push: true

    - name: Deploy to Staging
      run: |
        echo "Deploying staging image to your environment"
        # Add actual deployment commands here (e.g., kubectl, docker-compose)
        # Example: kubectl apply -f k8s/staging-deployment.yaml
  

  production-deployment:
    name: Deploy to Production
    needs: staging-deployment
    runs-on: ubuntu-latest
    environment: production
    if: success()

    steps:
    - name: Checkout code 
      uses: actions/checkout@v4
      
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .

    - name: Verify Files Exist
      run: |
        ls -la
        test -f Dockerfile || exit 1
        ls -la target/*.jar || exit 1
        
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Push Production Image
      uses: docker/build-push-action@v5
      with:
        context: .
        tags: |
          ${{ env.DOCKERHUB_REPO }}:latest
          ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
        push: true

    - name: Deploy to Production
      run: |
        echo "Deploying production image"
        # Add actual production deployment commands
        # Example: kubectl apply -f k8s/production-deployment.yaml
  post-deployment:
    name: Post-Deployment
    needs: production-deployment
    runs-on: ubuntu-latest

    steps:
    - name: Smoke Tests
      run: |
        echo "Running smoke tests on production"
        # Add actual smoke test commands
    - name: Send Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: "Production deployment successful! Version: ${{ github.sha }}"
